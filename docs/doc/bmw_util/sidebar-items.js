window.SIDEBAR_ITEMS = {"fn":[["deserialize","Deserializes a Serializable from any std::io::Read implementation."],["serialize","Serializes a Serializable into any std::io::Write implementation."]],"macro":[["ctx","Macro to create a context which is used by the data structures."],["hashset","The [`crate::hashset`] macro is used to instantiate a [`crate::StaticHashset`]. If no parameters are specified, default values of `max_entries` = 1_000_000 and `max_load_factor` = 0.75 are used. If one parameter is specified, it will be use for `max_entries`. If two parameters are specified, they will be used for `max_entries` and `max_load_factor` respectively. The `max_entries` value is the maximum number of entries that can exist in this [`crate::StaticHashset`]. The `max_load_factor` is the maximum load factor that this [`crate::StaticHashset`] can support. The [`crate::StaticHashset`] will calculate the size of the entry array based on these values. With a lower load factor a larger entry array must be used to support `max_entries` so the lower the load factor the more resources are required."],["hashset_set_raw","This macro is used to put a hashset into ‘raw’ mode. After this function is called, only the ‘raw’ functions (i.e. [`crate::StaticHashset::insert_raw`], [`crate::StaticHashset::contains_raw`], [`crate::StaticHashset::remove_raw`] and [`crate::StaticHashset::iter_raw`]) will return useful values."],["hashtable","The [`crate::hashtable`] macro is used to instantiate a [`crate::StaticHashtable`]. If no parameters are specified, default values of `max_entries` = 1_000_000 and `max_load_factor` = 0.75 are used. If one parameter is specified, it will be use for `max_entries`. If two parameters are specified, they will be used for `max_entries` and `max_load_factor` respectively. The `max_entries` value is the maximum number of entries that can exist in this [`crate::StaticHashtable`]. The `max_load_factor` is the maximum load factor that this [`crate::StaticHashtable`] can support. The [`crate::StaticHashtable`] will calculate the size of the entry array based on these values. With a lower load factor a larger entry array must be used to support `max_entries` so the lower the load factor the more resources are required."],["hashtable_set_raw","This macro is used to put a hashtable into ‘raw’ mode. After this function is called, only the ‘raw’ functions (i.e. [`crate::StaticHashtable::insert_raw`], [`crate::StaticHashtable::get_raw`], [`crate::StaticHashtable::remove_raw`] and [`crate::StaticHashtable::iter_raw`]) will return useful values."],["init_slab_allocator","Macro to initialize the global slab allocator. It is important to note that this macro only affects the thread in which it is executed in and must be called separately in each thread that you wish to initialize the global slab allocator in. Also, the data structures, like [`crate::StaticHashtable`] and [`crate::StaticHashset`], will initialized this slab allocator with default values if this macro is not called first. Therefore, it makes sense to call this very soon after starting a thread that will use it. The slab allocator is initialized with `slab_size` and `slab_count` parameters respecitvely. `slab_size` is the size in bytes of slabs. The default value is 1_024 bytes. `slab_count` is the number of slabs to initialize. The default value is 10_240. The defaults will be used if this macro is not called."],["slab_allocator","The [`crate::slab_allocator`] macro allows for creation of a slab allocator that may be used by the data structures in this crate. If no parameters are specified, the default values of `slab_size` equal to 1_024 and `slab_count` of 10_240 are used. If one paramater is specifed, it is used as `slab_count` and the default is used for `slab_size`. If two parameters are specified, it is used as `slab_count` and `slab_size` respectively. The `slab_count` is the total number of slabs in this slab allocator. It is important to note that additional slabs may not be added after startup. `The slab_size` is the size in bytes of the slabs in this instance."]],"struct":[["BinReader","Utility wrapper for an underlying byte Reader. Defines higher level methods to write numbers, byte vectors, hashes, etc."],["BinWriter","Utility wrapper for an underlying byte Writer. Defines higher level methods to write numbers, byte vectors, hashes, etc."],["Context","A context which is used in many of the methods in this crate. The reason for using the context is to avoid creating new Vectors, and other structures that require heap allocations at run time. Instead the context may be created at startup and used throughout the lifecycle of the application. The [`crate::Context`] struct may be conveniently built through the [`crate::ctx`] macro."],["Slab","Struct that is used as a immutable refernce to data in a slab. See [`crate::SlabAllocator`] for further details."],["SlabAllocatorBuilder","Builder struct used to build slab allocators. The build functions are generally called through the [`crate::slab_allocator`] macro to create instances of [`crate::SlabAllocator`] or through the [`crate::init_slab_allocator`] to configure the global thread local [`crate::SlabAllocator`]."],["SlabAllocatorConfig","Slab Allocator configuration struct. This struct is the input to the [`crate::SlabAllocator::init`] function. The two parameters are `slab_size` which is the size of the slabs in bytes allocated by this [`crate::SlabAllocator`] and `slab_count` which is the number of slabs that can be allocated by this [`crate::SlabAllocator`]."],["SlabMut","Struct that is used as a mutable refernce to data in a slab. See [`crate::SlabAllocator`] for further details."],["StaticHashsetBuilder","A builder struct used to build a [`crate::StaticHashset`]. This macro is called by [`crate::hashset`]. [`crate::StaticHashset`]s are generally built through that macro."],["StaticHashsetConfig","The configuration struct for a [`StaticHashset`]. This struct is passed into the [`crate::StaticHashsetBuilder::build`] function. The [`std::default::Default`] trait is implemented for this trait."],["StaticHashtableBuilder","A builder struct used to build a [`crate::StaticHashtable`]. This macro is called by [`crate::hashtable`]. [`crate::StaticHashtable`]s are generally built through that macro."],["StaticHashtableConfig","The configuration struct for a [`StaticHashtable`]. This struct is passed into the [`crate::StaticHashtableBuilder::build`] function. The [`std::default::Default`] trait is implemented for this trait."]],"trait":[["Reader","Reader trait used for deserializing data."],["Serializable","This is the trait used by all data structures to serialize and deserialize data. Anthing stored in them must implement this trait. Commonly needed implementations are built in the ser module in this crate. These include Vec, String, integer types among other things."],["SlabAllocator","This trait defines the public interface to the [`crate::SlabAllocator`]. The slab allocator is used by the other data structures in this crate to avoid dynamic heap allocations. By itself, the slab allocator is fairly simple. It only allocates and frees slabs. [`crate::SlabAllocator::get`] and [`crate::SlabAllocator::get_mut`] are also provided to obtain immutable and mutable references to a slab respectively. They only contain references to the data and not copies."],["StaticHashset","The [`crate::StaticHashset`] trait defines the public interface to the static hashset. The hashset in this crate uses linear probing to handle collisions and it cannot be resized after it is intialized. Configuration of the hashset is done via the [`crate::StaticHashsetConfig`] struct. The shared implementation can be instantiated as a [`crate::StaticHashset`] through the [`crate::StaticHashsetBuilder::build`] function or as a [`crate::StaticHashtable`] through the [`crate::StaticHashtableBuilder::build`] function. Although there is a different interface for each, they are very similar and share most of the implementation code. In most cases, the data structures in this crate should be instantiated through the macros, but they can also be instantiated through the builder structs as well. See [`crate::hashset`]."],["StaticHashtable","The [`crate::StaticHashtable`] trait defines the public interface to the static hashtable. The hashtable in this crate uses linear probing to handle collisions and it cannot be resized after it is intialized. Configuration of the hashtable is done via the [`crate::StaticHashtableConfig`] struct. The shared implementation can be instantiated as a [`crate::StaticHashtable`] through the [`crate::StaticHashtableBuilder::build`] function or as a [`crate::StaticHashset`] through the [`crate::StaticHashsetBuilder::build`] function. Although there is a different interface for each, they are very similar and share most of the implementation code. In most cases, the data structures in this crate should be instantiated through the macros, but they can also be instantiated through the builder structs as well. See [`crate::hashtable`]."],["StaticList","TODO: not implemented"],["StaticQueue","TODO: not implemented"],["ThreadPool","TODO: not implemented"],["Writer","Writer trait used to serializing data."]]};