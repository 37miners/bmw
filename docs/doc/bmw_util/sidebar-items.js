window.SIDEBAR_ITEMS = {"enum":[["ConfigOption","Configuration options used throughout this crate via macro."],["PatternParam",""],["PoolResult","The result returned from a call to [`crate::ThreadPool::execute`]. This is similar to [`std::result::Result`] except that it implements [`std::marker::Send`] and [`std::marker::Sync`] so that it can be passed through threads. Also a type [`crate::PoolResult::Panic`] is returned if a thread panic occurs in the thread pool."],["SuffixParam",""]],"fn":[["deserialize","Deserializes a Serializable from any std::io::Read implementation."],["serialize","Serializes a Serializable into any std::io::Write implementation."]],"macro":[["array",""],["array_list",""],["array_list_box",""],["block_on","Macro used to block until a thread pool has completed the task. See [`crate::ThreadPool`] for working examples."],["execute","Macro used to execute tasks in a thread pool. See [`crate::ThreadPool`] for working examples."],["hashset",""],["hashset_box",""],["hashset_config",""],["hashset_sync",""],["hashset_sync_box",""],["hashset_sync_config",""],["hashtable",""],["hashtable_box",""],["hashtable_config",""],["hashtable_sync",""],["hashtable_sync_box",""],["hashtable_sync_config",""],["init_slab_allocator",""],["list",""],["list_append",""],["list_box",""],["list_eq",""],["list_sync",""],["list_sync_box",""],["pattern",""],["queue",""],["queue_box",""],["slab_allocator",""],["stack",""],["stack_box",""],["suffix_tree",""],["thread_pool","Macro used to configure/build a thread pool. See [`crate::ThreadPool`] for working examples."]],"struct":[["Array",""],["ArrayIterator",""],["ArrayList",""],["BinReader","Utility wrapper for an underlying byte Reader. Defines higher level methods to write numbers, byte vectors, hashes, etc."],["BinWriter","Utility wrapper for an underlying byte Writer. Defines higher level methods to write numbers, byte vectors, hashes, etc."],["Builder",""],["HashsetConfig","The configuration struct for a [`Hashset`]. This struct is passed into the [`crate::Builder::build_hashset`] function. The [`std::default::Default`] trait is implemented for this trait."],["HashsetIterator",""],["HashtableConfig","The configuration struct for a [`Hashtable`]. This struct is passed into the [`crate::Builder::build_hashtable`] function. The [`std::default::Default`] trait is implemented for this trait."],["HashtableIterator",""],["ListConfig",""],["ListIterator",""],["Match",""],["Pattern",""],["Slab","Struct that is used as a immutable refernce to data in a slab. See [`crate::SlabAllocator`] for further details."],["SlabAllocatorConfig","Slab Allocator configuration struct. This struct is the input to the [`crate::SlabAllocator::init`] function. The two parameters are `slab_size` which is the size of the slabs in bytes allocated by this [`crate::SlabAllocator`] and `slab_count` which is the number of slabs that can be allocated by this [`crate::SlabAllocator`]."],["SlabMut","Struct that is used as a mutable refernce to data in a slab. See [`crate::SlabAllocator`] for further details."],["SlabReader",""],["SlabWriter",""],["ThreadPoolConfig","The configuration struct for a [`crate::ThreadPool`]. This struct is passed into the [`crate::Builder::build_thread_pool`] function or the [`crate::thread_pool`] macro. The [`std::default::Default`] trait is implemented for this trait. Also see [`crate::ConfigOption`] for details on configuring via macro."]],"trait":[["Hashset",""],["Hashtable",""],["List",""],["Queue",""],["Reader","Reader trait used for deserializing data."],["Serializable","This is the trait used by all data structures to serialize and deserialize data. Anthing stored in them must implement this trait. Commonly needed implementations are built in the ser module in this crate. These include Vec, String, integer types among other things."],["SlabAllocator","This trait defines the public interface to the [`crate::SlabAllocator`]. The slab allocator is used by the other data structures in this crate to avoid dynamic heap allocations. By itself, the slab allocator is fairly simple. It only allocates and frees slabs. [`crate::SlabAllocator::get`] and [`crate::SlabAllocator::get_mut`] are also provided to obtain immutable and mutable references to a slab respectively. They only contain references to the data and not copies."],["SortableList",""],["Stack",""],["SuffixTree",""],["ThreadPool","This trait defines the public interface to the ThreadPool. A pool can be configured via the [`crate::ThreadPoolConfig`] struct. The thread pool should be accessed through the macros under normal circumstances. See [`crate::thread_pool`], [`crate::execute`] and [`crate::block_on`] for additional details. The thread pool can be passed through threads via a [`bmw_log::Lock`] or [`bmw_log::LockBox`] so a single thread pool can service multiple worker threads. See examples below."],["Writer","Writer trait used to serializing data."]]};