initSidebarItems({"fn":[["deserialize","Deserializes a Serializable from any std::io::Read implementation."],["serialize","Serializes a Serializable into any std::io::Write implementation."]],"macro":[["hashset","The [`crate::hashset`] macro is used to instantiate a [`crate::StaticHashset`]. If no parameters are specified, default values of `max_entries` = 1_000_000 and `max_load_factor` = 0.75 are used. If one parameter is specified, it will be use for `max_entries`. If two parameters are specified, they will be used for `max_entries` and `max_load_factor` respectively. The `max_entries` value is the maximum number of entries that can exist in this [`crate::StaticHashset`]. The `max_load_factor` is the maximum load factor that this [`crate::StaticHashset`] can support. The [`crate::StaticHashset`] will calculate the size of the entry array based on these values. With a lower load factor a larger entry array must be used to support `max_entries` so the lower the load factor the more resources are required."],["hashtable","The [`crate::hashtable`] macro is used to instantiate a [`crate::StaticHashtable`]. If no parameters are specified, default values of `max_entries` = 1_000_000 and `max_load_factor` = 0.75 are used. If one parameter is specified, it will be use for `max_entries`. If two parameters are specified, they will be used for `max_entries` and `max_load_factor` respectively. The `max_entries` value is the maximum number of entries that can exist in this [`crate::StaticHashtable`]. The `max_load_factor` is the maximum load factor that this [`crate::StaticHashtable`] can support. The [`crate::StaticHashtable`] will calculate the size of the entry array based on these values. With a lower load factor a larger entry array must be used to support `max_entries` so the lower the load factor the more resources are required."],["init_slab_allocator","Macro to initialize the global slab allocator. It is important to note that this macro only affects the thread in which it is executed in and must be called separately in each thread that you wish to initialize the global slab allocator in. Also, the data structures, like [`crate::StaticHashtable`] and [`crate::StaticHashset`], will initialized this slab allocator with default values if this macro is not called first. Therefore, it makes sense to call this very soon after starting a thread that will use it. The slab allocator is initialized with `slab_size` and `slab_count` parameters respecitvely. `slab_size` is the size in bytes of slabs. The default value is 1_024 bytes. `slab_count` is the number of slabs to initialize. The default value is 10_240. The defaults will be used if this macro is not called."],["slab_allocator","The [`crate::slab_allocator`] macro allows for creation of a slab allocator that may be used by the data structures in this crate. If no parameters are specified, the default values of `slab_size` equal to 1_024 and `slab_count` of 10_240 are used. If one paramater is specifed, it is used as `slab_count` and the default is used for `slab_size`. If two parameters are specified, it is used as `slab_count` and `slab_size` respectively. The `slab_count` is the total number of slabs in this slab allocator. It is important to note that additional slabs may not be added after startup. `The slab_size` is the size in bytes of the slabs in this instance."]],"struct":[["BinReader","Utility to read from a binary source"],["BinWriter","Utility wrapper for an underlying byte Writer. Defines higher level methods to write numbers, byte vectors, hashes, etc."],["SlabAllocatorBuilder",""],["SlabAllocatorConfig","Slab Allocator configuration struct. This struct is the input to the [`crate::SlabAllocator::init`] function. The two parameters are `slab_size` which is the size of the slabs in bytes allocated by this [`crate::SlabAllocator`] and `slab_count` which is the number of slabs that can be allocated by this [`crate::SlabAllocator`]."],["StaticHashsetBuilder",""],["StaticHashsetConfig","The configuration struct for a [`StaticHashset`]. This struct is passed into the [`crate::StaticHashsetBuilder::build`] function. The [`std::default::Default`] trait is implemented for this trait."],["StaticHashtableBuilder",""],["StaticHashtableConfig","The configuration struct for a [`StaticHashtable`]. This struct is passed into the [`crate::StaticHashtableBuilder::build`] function. The [`std::default::Default`] trait is implemented for this trait."]],"trait":[["RawHashsetIterator","An iterator for iterating through raw data in this [`crate::StaticHashtable`]. This is distinct from the iterator that is implemented as [`crate::StaticHashtable`]’s [`std::iter::IntoIterator`] trait which returns the serialized and not raw data."],["RawHashtableIterator","An iterator for iterating through raw data in this [`crate::StaticHashtable`]. This is distinct from the iterator that is implemented as [`crate::StaticHashtable`]’s [`std::iter::IntoIterator`] trait which returns the serialized and not raw data."],["Reader",""],["Serializable",""],["Slab",""],["SlabAllocator","This trait defines the public interface for the [`crate::SlabAllocator`]. The slab allocator is used by the other data structures in this crate to avoid dynamic heap allocations. By itself, the slab allocator is fairly simple. It only allocates and frees slabs. [`crate::SlabAllocator::get`] and [`crate::SlabAllocator::get_mut`] are also provided to obtain immutable and mutable references to a slab respectively. They only contain references to the data and not copies."],["SlabMut",""],["StaticHashset",""],["StaticHashtable",""],["StaticQueue",""],["ThreadPool",""],["Writer",""]]});